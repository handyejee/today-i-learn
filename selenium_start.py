# Generated by Selenium IDE
import pytest
import time
import json

#라이브러리 불러오기
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestLFfashion():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_LFfashion(self):
    self.driver.get("https://sbtest.sabangnet.co.kr/")
    self.driver.set_window_size(1936, 1056)
    self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(6) .el-submenu__title").click()
    self.driver.find_element(By.CSS_SELECTOR, ".is-opened .nest-menu:nth-child(1) span").click()
    element = self.driver.find_element(By.CSS_SELECTOR, ".is-opened .nest-menu:nth-child(1) span")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(3) > .el-col .el-select__caret").click()
    self.driver.find_element(By.CSS_SELECTOR, ".hover").click()
    self.driver.find_element(By.CSS_SELECTOR, ".el-col-21 > .el-input > .el-input__inner").click()
    self.driver.find_element(By.CSS_SELECTOR, ".el-col-21 > .el-input > .el-input__inner").send_keys("LG")
    self.driver.find_element(By.CSS_SELECTOR, ".el-col-21 > .el-input > .el-input__inner").send_keys(Keys.ENTER)
    self.vars["window_handles"] = self.driver.window_handles
    self.driver.find_element(By.CSS_SELECTOR, ".el-table__row:nth-child(3) > .el-table_1_column_10 .el-button").click()
    self.vars["win8350"] = self.wait_for_window(2000)
    self.vars["root"] = self.driver.current_window_handle
    self.driver.switch_to.window(self.vars["win8350"])
    element = self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(1) > .el-col .el-input__inner")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    element = self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(1) > .el-col .el-input__inner")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(1) > .el-col .el-input__inner")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(1) > .el-col .el-input__inner").click()
    self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(1) > .el-col .el-input__inner").send_keys("LG패션 부가정보0226 수정")
    self.driver.find_element(By.CSS_SELECTOR, ".el-row > div > .el-input > .el-input__inner").click()
    self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(6) .el-input__inner").click()
    self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(6) .el-input__inner").send_keys("구매불가")
    self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(19) .el-input__inner").click()
    self.driver.find_element(By.CSS_SELECTOR, ".hover > span").click()
    self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(1) > .el-textarea > .el-textarea__inner").click()
    self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(1) > .el-textarea > .el-textarea__inner").send_keys("구매불가")
    self.driver.find_element(By.CSS_SELECTOR, ".center > .sb-save-btn1 > span").click()
    self.driver.find_element(By.CSS_SELECTOR, ".el-button--small > span").click()
    self.driver.close()
    self.driver.switch_to.window(self.vars["root"])